
generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Blogpost {
  id        String   @id @default(uuid())
  title     String
  content   String
  game      String
  authorid  String
  authorName String
  authorimage String?
  createdat DateTime @default(now())
  updatedat DateTime @updatedAt
  scheduled DateTime
  private Boolean @default(false)
  chatRoom  ChatRoom? @relation(name: "BlogpostToChatRoom")
  invitations Invitations[]
}

model ChatRoom {
  id         String   @id @default(uuid())
  name       String
  messages   Message[]
  blogpost   Blogpost @relation(name: "BlogpostToChatRoom", fields: [blogpostId], references: [id])
  blogpostId String   @unique
  users      InChatRoom[]
  blocked Blocked[]
}

model Message {
  id         String  @id @default(uuid())
  authorName String
  content    String
  createdAt  DateTime @default(now())
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId String
  authorPicture String
}

model Games{
  id String @id @default(uuid())
  title String
  content String
  createdat DateTime @default(now())
  updatedat DateTime @updatedAt
  genre String
  rating Int
  downloadurl String
  imageurl Imageurl[]


}

model Imageurl {
  id String @id @default(uuid())
  title String
  imageurl String
  games Games @relation(fields: [gameId], references: [id])
  gameId String @map("gamesId")

}
model InChatRoom {
  id          String  @id @default(uuid())
  userId      String
  chatRoomId  String
  userPresence Boolean @default(false)
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)

  @@unique([userId, chatRoomId])
}

model Blocked {
  id         String   @id @default(uuid())
  userId     String
  chatRoomId String
  isBlocked  Boolean  @default(true)

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)

  @@unique([userId, chatRoomId])
}


model Invitations {
  id         String   @id @default(uuid())
  userId     String
  blogpostId String
  content    String
  read Boolean @default(false)
  scheduled  DateTime
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  blogpost   Blogpost @relation(fields: [blogpostId], references: [id], onDelete: Cascade)

  @@unique([userId, blogpostId])
}



model User {
  id            String          @id @default(cuid())
  name          String?         @unique
  email         String          @unique
  password      String?
  emailVerified DateTime?
  image         String? 
  accounts      Account[]
  sessions      Session[]
  authenticator Authenticator[]
  inChatRooms   InChatRoom[]
  blocked Blocked[]
  invitations Invitations[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id String @id @default(uuid()) 
  email String
  token      String
  expires    DateTime
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}
